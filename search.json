[{"path":"https://inseefr.github.io/btb/articles/btb.html","id":"install-btb","dir":"Articles","previous_headings":"","what":"Install btb","title":"Spatial smoothing with `btb` R package","text":"btb available CRAN : get bug fix use feature development version, can install development version GitHub :","code":"install.packages(\"btb\") install.packages(\"remotes\") remotes::install_github(\"InseeFr/btb\")"},{"path":[]},{"path":"https://inseefr.github.io/btb/articles/btb.html","id":"warning-with-personal-data","dir":"Articles","previous_headings":"Perform spatial smoothing","what":"Warning with personal data","title":"Spatial smoothing with `btb` R package","text":"Spatial smoothing generally reduces individual data disclosure. However, smoothed data can contain individual information. Please remain cautious case.","code":""},{"path":[]},{"path":"https://inseefr.github.io/btb/articles/btb.html","id":"the-data","dir":"Articles","previous_headings":"Perform spatial smoothing > Smoothing gas station prices","what":"The data","title":"Spatial smoothing with `btb` R package","text":"btb package provides several data tables. every gas station metropolitan France, dfPrix_SP95_2016 table gives : longitude / latitude coordinates (numeric variables) annual mean price unleaded gasoline euros 2016 Let’s visualize stations : First, use sf package transform data.frame geometric points. , plot ","code":"library(btb) #> Loading required package: dplyr #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union #> Loading required package: mapsf data(dfPrix_SP95_2016) head(dfPrix_SP95_2016) #>    SP95         x       y #> 2 1.355  588356.7 6221492 #> 3 1.469  981997.3 6312078 #> 4 1.349  873384.0 6504111 #> 7 1.512 1023983.9 6351175 #> 8 1.480  377274.3 6682264 #> 9 1.403  893440.4 6690013 library(sf) #> Linking to GEOS 3.8.0, GDAL 3.0.4, PROJ 6.3.1; sf_use_s2() is TRUE sfPrix_SP95_2016 <- st_as_sf(dfPrix_SP95_2016,coords = c(\"x\",\"y\"), crs=2154) plot(sfPrix_SP95_2016$geometry)"},{"path":"https://inseefr.github.io/btb/articles/btb.html","id":"optional-step-from-points-to-aggregate-grids","dir":"Articles","previous_headings":"Perform spatial smoothing","what":"Optional step : from points to aggregate grids","title":"Spatial smoothing with `btb` R package","text":"figure spatial distribution smoothing data, can interesting aggregate points inside grid (e.g : number gas stations 20 km pixels grid), smoothing less time-consuming btb provides btb_add_centroids btb_ptsToGrid functions make easy : First, associate point centroid pixel (btb_add_centroids). x_centro y_centro created table.1 Second, aggregate data centroids Finally, associate centroid coordinates geometric polygon (btb_ptsToGrid) polygons aggregated data, can map . , use mapsf package .  map represents aggregated (mean price) smoothed yet. Despite patchwork aspect, map good first step better understand data.","code":"dfPrix_SP95_2016 <- btb_add_centroids(dfPrix_SP95_2016,                                        iCellSize = 20000,                                       names_coords = c(\"x\",\"y\")) head(dfPrix_SP95_2016) #>    SP95         x       y x_centro y_centro #> 2 1.355  588356.7 6221492   590000  6230000 #> 3 1.469  981997.3 6312078   990000  6310000 #> 4 1.349  873384.0 6504111   870000  6510000 #> 7 1.512 1023983.9 6351175  1030000  6350000 #> 8 1.480  377274.3 6682264   370000  6690000 #> 9 1.403  893440.4 6690013   890000  6690000 library(dplyr) centro_values <- dfPrix_SP95_2016 %>%   group_by(x_centro, y_centro) %>%   summarise(pricemean=mean(SP95, rm.na = TRUE)) #> `summarise()` has grouped output by 'x_centro'. You can override using the #> `.groups` argument. grid_values <- btb_ptsToGrid(centro_values, sEPSG = 2154,                              iCellSize = 20000,                               names_centro = c(\"x_centro\",\"y_centro\")) nrow(grid_values) #> [1] 1328 head(grid_values) #> Simple feature collection with 6 features and 3 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 120000 ymin: 6760000 xmax: 160000 ymax: 6860000 #> Projected CRS: RGF93 / Lambert-93 #> # A tibble: 6 × 4 #> # Groups:   x_centro [2] #>   x_centro y_centro pricemean                                           geometry #>      <dbl>    <dbl>     <dbl>                                      <POLYGON [m]> #> 1   130000  6790000      1.33 ((120000 6800000, 140000 6800000, 140000 6780000,… #> 2   130000  6830000      1.32 ((120000 6840000, 140000 6840000, 140000 6820000,… #> 3   130000  6850000      1.36 ((120000 6860000, 140000 6860000, 140000 6840000,… #> 4   150000  6770000      1.35 ((140000 6780000, 160000 6780000, 160000 6760000,… #> 5   150000  6790000      1.37 ((140000 6800000, 160000 6800000, 160000 6780000,… #> 6   150000  6810000      1.30 ((140000 6820000, 160000 6820000, 160000 6800000,… library(mapsf)  mapsf::mf_map(x = grid_values,        type = \"choro\",        var=\"pricemean\",        breaks = \"quantile\",        nbreaks = 5,        lwd=1,        leg_val_rnd = 1)"},{"path":"https://inseefr.github.io/btb/articles/btb.html","id":"first-smoothing-the-density-of-gas-stations","dir":"Articles","previous_headings":"Perform spatial smoothing","what":"First smoothing : the density of gas stations","title":"Spatial smoothing with `btb` R package","text":"example , smooth density gas stations using 5~000 km pixels 100 km bandwidth. Note need create new dummy variable (equals 1 every station) count stations.  Note btb_smooth conservative : Number gas stations pts_density : 5573 Number gas station smooth_density : 5573","code":"pts_density <- dfPrix_SP95_2016[,c(\"x\",\"y\")] # Create dummy pts_density$stations_density <- 1L head(pts_density) #>           x       y stations_density #> 2  588356.7 6221492                1 #> 3  981997.3 6312078                1 #> 4  873384.0 6504111                1 #> 7 1023983.9 6351175                1 #> 8  377274.3 6682264                1 #> 9  893440.4 6690013                1  # Smoothing smooth_density <- btb_smooth(   pts = pts_density,   sEPSG = 2154,   iBandwidth = 100000,   iCellSize = 5000)  head(smooth_density) #> Simple feature collection with 6 features and 3 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 1170000 ymin: 6005000 xmax: 1200000 ymax: 6010000 #> Projected CRS: RGF93 / Lambert-93 #>         x       y stations_density                       geometry #> 1 1172500 6007500      0.008703036 POLYGON ((1170000 6010000, ... #> 2 1177500 6007500      0.010129089 POLYGON ((1175000 6010000, ... #> 3 1182500 6007500      0.011476304 POLYGON ((1180000 6010000, ... #> 4 1187500 6007500      0.012691105 POLYGON ((1185000 6010000, ... #> 5 1192500 6007500      0.013729008 POLYGON ((1190000 6010000, ... #> 6 1197500 6007500      0.014555589 POLYGON ((1195000 6010000, ...  # Map mapsf::mf_map(x = smooth_density,        type = \"choro\",        var=\"stations_density\",        breaks = \"quantile\",        nbreaks = 5,        border = NA,        leg_val_rnd = 1)"},{"path":"https://inseefr.github.io/btb/articles/btb.html","id":"smoothing-means-gas-mean-price","dir":"Articles","previous_headings":"Perform spatial smoothing","what":"Smoothing means : gas mean price","title":"Spatial smoothing with `btb` R package","text":"Smoothing ratio works almost way : First, need smooth numerator denominator. , calculate proper smoothed ratio, must smooth separately numerator denominator calculate ratio. must smooth directly ratio. Note btb_smooth function smoothes default numeric variables input points table (parameter pts).","code":"# Prepare your data pts_meanprice <- dfPrix_SP95_2016[,c(\"x\",\"y\",\"SP95\")] pts_meanprice$stations_density <- 1L head(pts_meanprice) #>           x       y  SP95 stations_density #> 2  588356.7 6221492 1.355                1 #> 3  981997.3 6312078 1.469                1 #> 4  873384.0 6504111 1.349                1 #> 7 1023983.9 6351175 1.512                1 #> 8  377274.3 6682264 1.480                1 #> 9  893440.4 6690013 1.403                1  # Smooth both prices and station density smooth_density <- btb_smooth(   pts = pts_meanprice,   sEPSG = 2154,   iBandwidth = 100000,   iCellSize = 5000)  head(smooth_density) #> Simple feature collection with 6 features and 4 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 1170000 ymin: 6005000 xmax: 1200000 ymax: 6010000 #> Projected CRS: RGF93 / Lambert-93 #>         x       y       SP95 stations_density                       geometry #> 1 1172500 6007500 0.01320174      0.008703036 POLYGON ((1170000 6010000, ... #> 2 1177500 6007500 0.01536551      0.010129089 POLYGON ((1175000 6010000, ... #> 3 1182500 6007500 0.01740988      0.011476304 POLYGON ((1180000 6010000, ... #> 4 1187500 6007500 0.01925362      0.012691105 POLYGON ((1185000 6010000, ... #> 5 1192500 6007500 0.02082924      0.013729008 POLYGON ((1190000 6010000, ... #> 6 1197500 6007500 0.02208448      0.014555589 POLYGON ((1195000 6010000, ...  # Calculate the smoothed mean (from smoothed nominator and denominator) smooth_density <- smooth_density %>% mutate(meanprice=SP95/stations_density) mapsf::mf_map(x = smooth_density,        type = \"choro\",        var=\"meanprice\",        breaks = \"quantile\",        nbreaks = 5,        border = NA,        leg_val_rnd = 1)"},{"path":"https://inseefr.github.io/btb/articles/btb.html","id":"quantile-smoothing-smooth-the-distribution-of-gas-prices","dir":"Articles","previous_headings":"Perform spatial smoothing","what":"Quantile smoothing : smooth the distribution of gas prices","title":"Spatial smoothing with `btb` R package","text":"Quantile smoothing different methodology. major benefits : less sensitive outliers gives information distribution data","code":"pts_quantiles <- dfPrix_SP95_2016[,c(\"x\",\"y\",\"SP95\")] head(pts_quantiles) #>           x       y  SP95 #> 2  588356.7 6221492 1.355 #> 3  981997.3 6312078 1.469 #> 4  873384.0 6504111 1.349 #> 7 1023983.9 6351175 1.512 #> 8  377274.3 6682264 1.480 #> 9  893440.4 6690013 1.403  smooth_quantiles <- btb_smooth(pts = pts_quantiles,                                 sEPSG = 2154, iBandwidth = 100000,                                iCellSize = 5000,vQuantiles = c(0.5,0.9))  head(smooth_quantiles) #> Simple feature collection with 6 features and 5 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 1170000 ymin: 6005000 xmax: 1200000 ymax: 6010000 #> Projected CRS: RGF93 / Lambert-93 #>   nbObs SP95_05 SP95_09       x       y                       geometry #> 1    26   1.513    1.53 1172500 6007500 POLYGON ((1170000 6010000, ... #> 2    27   1.513    1.53 1177500 6007500 POLYGON ((1175000 6010000, ... #> 3    27   1.513    1.53 1182500 6007500 POLYGON ((1180000 6010000, ... #> 4    26   1.513    1.53 1187500 6007500 POLYGON ((1185000 6010000, ... #> 5    26   1.513    1.53 1192500 6007500 POLYGON ((1190000 6010000, ... #> 6    26   1.513    1.53 1197500 6007500 POLYGON ((1195000 6010000, ...  # Median smoothing :  mapsf::mf_map(x = smooth_quantiles,        type = \"choro\",        var=\"SP95_05\",        breaks = \"quantile\",        nbreaks = 5,        border = NA,        leg_val_rnd = 1) # Smooth the 9th decile : mapsf::mf_map(x = smooth_quantiles,        type = \"choro\",        var=\"SP95_09\",        breaks = \"quantile\",        nbreaks = 5,        border = NA,        leg_val_rnd = 1)"},{"path":"https://inseefr.github.io/btb/articles/btb.html","id":"the-ineighbor-parameter","dir":"Articles","previous_headings":"Perform spatial smoothing","what":"The iNeighbor parameter","title":"Spatial smoothing with `btb` R package","text":", use data indicates number poor households squared data (200 meters) island called “La Réunion”. point centroid grid used publish aggregated data (1 000 meters pixels). Let’s smooth proportion poors among households automatic grid (iNeighbor parameter absent btb_smooth function). following example, note btb_smooth function accepts sf points input (also case btb_ptsToGrid).   Now, let’s smooth ratio, smoothing specifications (iBandwidth iCellSize) iNeighbor = 0. case, automatic grid uses pixels contain least one data point (, least one household). result quite different.","code":"# Load data data(\"reunion\") head(reunion) #>        x       y   houhold   phouhold #> 1 359500 7634300  5.069307  2.3762376 #> 2 359500 7634500 26.930693 12.6237624 #> 3 355900 7634500 15.000000  4.0000000 #> 4 356100 7634500 39.000000 20.0000000 #> 5 356300 7634500 41.642857 15.1428571 #> 6 356500 7634500  2.357143  0.8571429  # Optional : transform as sf points sfreunion <- sf::st_as_sf(reunion,coords= c(\"x\",\"y\"), crs = 3727) plot(sfreunion$geometry) # btb_smooth with an automatic grid smooth_reunion <- btb_smooth(sfreunion,iCellSize = 500,iBandwidth = 5000)  # Calculate the ratio smooth_reunion <- smooth_reunion %>% mutate(prop_poors = 100 * phouhold / houhold)  # map mapsf::mf_map(x = smooth_reunion,        type = \"choro\",        var=\"prop_poors\",        breaks = \"quantile\",        nbreaks = 5,        border = NA,        leg_val_rnd = 1) smooth_reunion <- btb_smooth(sfreunion,iCellSize = 500,iBandwidth = 5000, iNeighbor = 0) smooth_reunion <- smooth_reunion %>% mutate(prop_poors = 100 * phouhold / houhold)  mapsf::mf_map(x = smooth_reunion,        type = \"choro\",        var=\"prop_poors\",        breaks = \"quantile\",        nbreaks = 5,        border = NA,        leg_val_rnd = 1)"},{"path":"https://inseefr.github.io/btb/articles/btb.html","id":"inspire-naming","dir":"Articles","previous_headings":"Perform spatial smoothing","what":"Inspire naming","title":"Spatial smoothing with `btb` R package","text":"Using Inspire norm, btb_smooth btb_ptsToGrid allow name pixels proper international way. useful reuse purpose, merge operations, etc. just need use inspire = TRUE : , export geometric data, can use sf::write_sf function.","code":"smooth_reunion <- btb_smooth(sfreunion,iCellSize = 500,                              iBandwidth = 2000, iNeighbor = 0, inspire = TRUE) smooth_reunion <- smooth_reunion %>% mutate(prop_poors = 100 * phouhold / houhold) head(smooth_reunion) #> Simple feature collection with 6 features and 6 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 355500 ymin: 7634000 xmax: 360000 ymax: 7635000 #> Projected CRS: Reunion 1947 / TM Reunion #>        x       y   houhold phouhold                     idInspire #> 1 359750 7634250  58.60575 24.13523 CRS3727RES500mN7634000E359500 #> 2 355750 7634750 158.31143 69.21210 CRS3727RES500mN7634500E355500 #> 3 356250 7634750 191.80652 87.96571 CRS3727RES500mN7634500E356000 #> 4 356750 7634750 195.59692 90.96524 CRS3727RES500mN7634500E356500 #> 5 357750 7634750 125.03327 53.53656 CRS3727RES500mN7634500E357500 #> 6 358750 7634750  89.45056 34.01019 CRS3727RES500mN7634500E358500 #>                         geometry prop_poors #> 1 POLYGON ((359500 7634500, 3...   41.18236 #> 2 POLYGON ((355500 7635000, 3...   43.71895 #> 3 POLYGON ((356000 7635000, 3...   45.86169 #> 4 POLYGON ((356500 7635000, 3...   46.50648 #> 5 POLYGON ((357500 7635000, 3...   42.81785 #> 6 POLYGON ((358500 7635000, 3...   38.02121 sf::write_sf(\"MY/REPOSITORY/myfile.gpkg\")"},{"path":"https://inseefr.github.io/btb/articles/btb.html","id":"references","dir":"Articles","previous_headings":"Perform spatial smoothing","what":"References :","title":"Spatial smoothing with `btb` R package","text":"Geographically weighted summary statistics : framework localised exploratory data analysis, C.Brunsdon & al., Computers, Environment Urban Systems C.Brunsdon & al. (2002) doi:10.1016/S0198-9715(01)00009-6 Statistical Analysis Spatial Spatio-Temporal Point Patterns, Third Edition, Diggle, pp. 83-86, (2003) doi:10.1080/13658816.2014.937718. https://inseefrlab.github.io/formation-r-lissage-spatial/tuto.html","code":""},{"path":"https://inseefr.github.io/btb/articles/btb.html","id":"some-interesting-use-cases","dir":"Articles","previous_headings":"Perform spatial smoothing","what":"Some interesting use cases","title":"Spatial smoothing with `btb` R package","text":"https://mobile.twitter.com/DavidZumbach/status/1373166163497213952 http://r.iresmi.net/2019/05/11/kernel-spatial-smoothing-transforming-points-pattern--continuous-coverage/ https://semba-blog.netlify.app/06/30/2020/kernel-smoothin--spatial-data/ https://mobile.twitter.com/raffverduzco/status/1128075094524350464?lang=bg https://githubmemory.com/repo/SNStatComp/awesome-official-statistics-software","code":""},{"path":"https://inseefr.github.io/btb/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kim Antunez. Maintainer.","code":""},{"path":"https://inseefr.github.io/btb/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"SANTOS AD, SEMECURBE F, PRAMIL J, ANTUNEZ K, RENAUD , MAROUCHI F (2022). btb: Beyond Border - Kernel Density Estimation Urban Geography. https://github.com/InseeFr/btb, https://inseefr.github.io/btb/.","code":"@Manual{,   title = {btb: Beyond the Border - Kernel Density Estimation for Urban Geography},   author = {Arlindo DOS SANTOS and François SEMECURBE and Julien PRAMIL and Kim ANTUNEZ and Auriane RENAUD and Farida MAROUCHI},   year = {2022},   note = {https://github.com/InseeFr/btb, https://inseefr.github.io/btb/}, }"},{"path":"https://inseefr.github.io/btb/index.html","id":"beyond-the-border-","dir":"","previous_headings":"","what":"Beyond the Border - Kernel Density Estimation for Urban Geography","title":"Beyond the Border - Kernel Density Estimation for Urban Geography","text":"btb (“Beyond Border - Kernel Density Estimation Urban Geography”) R package provides functions dedicated urban analysis density estimation using KDE (kernel density estimator) method. partial transposition package Python also available: btbpy.","code":""},{"path":"https://inseefr.github.io/btb/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Beyond the Border - Kernel Density Estimation for Urban Geography","text":"btb_smooth() function allows square smooth geolocated data. calculates classical kernel smoothing (conservative) geographically weighted median. four major call modes function. first call mode btb_smooth(obs, epsg, cellsize, bandwith) classical kernel smoothing automatic grid. second call mode btb_smooth(obs, epsg, cellsize, bandwith, quantiles) geographically weighted median automatic grid. third call mode btb_smooth(obs, epsg, cellsize, bandwith, centroids) classical kernel smoothing user grid. fourth call mode btb_smooth(obs, epsg, cellsize, bandwith, quantiles, centroids) geographically weighted median user grid.","code":""},{"path":"https://inseefr.github.io/btb/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Beyond the Border - Kernel Density Estimation for Urban Geography","text":"btb available CRAN can therefore readily installed get bug fix use feature development version, can install development version GitHub :","code":"install.packages(\"btb\") install.packages(\"devtools\") devtools::install_github(\"InseeFr/btb\")"},{"path":"https://inseefr.github.io/btb/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Beyond the Border - Kernel Density Estimation for Urban Geography","text":"Details use package can found documentation. applications spatial smoothing presented chapter 8 Handbook Spatial Analysis published Insee. advise start consulting vignette package","code":""},{"path":"https://inseefr.github.io/btb/index.html","id":"contributions","dir":"","previous_headings":"","what":"Contributions","title":"Beyond the Border - Kernel Density Estimation for Urban Geography","text":"Maintainer: Kim Antunez antuki.kim+cran@gmail.com Creators, authors contributors: Arlindo DOS SANTOS [cre], François SEMECURBE [cre], Julien PRAMIL [aut] Kim ANTUNEZ [ctb], Auriane RENAUD [ctb], Farida MAROUCHI [ctb] Joachim TIMOTEO [ctb]","code":""},{"path":"https://inseefr.github.io/btb/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Beyond the Border - Kernel Density Estimation for Urban Geography","text":"Geographically weighted summary statistics : framework localised exploratory data analysis, C.Brunsdon & al., Computers, Environment Urban Systems C.Brunsdon & al. (2002) doi:10.1016/S0198-9715(01)00009-6 Statistical Analysis Spatial Spatio-Temporal Point Patterns, Third Edition, Diggle, pp. 83-86, (2003) doi:10.1080/13658816.2014.937718.","code":""},{"path":"https://inseefr.github.io/btb/reference/btb.html","id":null,"dir":"Reference","previous_headings":"","what":"btb — btb","title":"btb — btb","text":"btb","code":""},{"path":"https://inseefr.github.io/btb/reference/btb_add_centroids.html","id":null,"dir":"Reference","previous_headings":"","what":"btb_add_centroids — btb_add_centroids","title":"btb_add_centroids — btb_add_centroids","text":"Link points centroids grid segmentation Relie des points aux centroides des carreaux auxquels ces points appartiennent (dans un découpage de l'espace en grille carroyée)","code":""},{"path":"https://inseefr.github.io/btb/reference/btb_add_centroids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"btb_add_centroids — btb_add_centroids","text":"","code":"btb_add_centroids(   pts,   iCellSize,   offset = c(0L, 0L),   names_coords = c(\"x\", \"y\"),   names_centro = c(\"x_centro\", \"y_centro\"),   add = TRUE )"},{"path":"https://inseefr.github.io/btb/reference/btb_add_centroids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"btb_add_centroids — btb_add_centroids","text":"pts : points (df sf object) iCellSize : Size square cells (meters) Taille des côtés des carreaux (mètres) offset (numeric vector size 2) Offset grid non centered geographical referential origin Décalage si utilisation d'une grille non centrée sur l'origine du référentiel géographique names_coords : Names latitude-longitude variables (character vector) Noms des variables de latitude-longitude (vecteur character) names_centro Names latitude-longitude variables added centroids  (character vector) Noms des variables de latitude-longitude pour les centroïdes ajoutés (vecteur character) add (boolean) TRUE : returns pts + centroids coordinates Si TRUE : retourne pts + les coordonnées des centroïdes","code":""},{"path":"https://inseefr.github.io/btb/reference/btb_add_centroids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"btb_add_centroids — btb_add_centroids","text":"pts table additional centroids coordinates x_centro y_centro (df sf object) Table pts avec les coordonnées des centroïdes x_centro y_centro (objet df sf )","code":""},{"path":"https://inseefr.github.io/btb/reference/btb_add_centroids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"btb_add_centroids — btb_add_centroids","text":"Works sf points coordinates meters (degrees !). use sf points GPS coordinates example.","code":""},{"path":"https://inseefr.github.io/btb/reference/btb_add_centroids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"btb_add_centroids — btb_add_centroids","text":"","code":"pts <- data.frame( x = c(656913.1 , 348296.3 , 842276.3 , 716750.0 , 667418.2), y = c(6855995 , 6788073 , 6385680 , 7003984 , 6585793), val = 1:5) btb_add_centroids(pts, 100, names_centro = c(\"centroX\", \"centroY\")) #>          x       y val centroX centroY #> 1 656913.1 6855995   1  656950 6855950 #> 2 348296.3 6788073   2  348250 6788050 #> 3 842276.3 6385680   3  842250 6385650 #> 4 716750.0 7003984   4  716750 7003950 #> 5 667418.2 6585793   5  667450 6585750 btb_add_centroids(pts, 100, offset = c(50, 50), names_centro = c(\"centroX\", \"centroY\")) #>          x       y val centroX centroY #> 1 656913.1 6855995   1  656900 6856000 #> 2 348296.3 6788073   2  348300 6788100 #> 3 842276.3 6385680   3  842300 6385700 #> 4 716750.0 7003984   4  716800 7004000 #> 5 667418.2 6585793   5  667400 6585800 pts2 <- sf::st_as_sf(pts, coords = c(\"x\",\"y\"), crs = 2154) btb_add_centroids(pts2, 50) #> Simple feature collection with 5 features and 5 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 348296.3 ymin: 6385680 xmax: 842276.3 ymax: 7003984 #> Projected CRS: RGF93 / Lambert-93 #>   val        X       Y x_centro y_centro                 geometry #> 1   1 656913.1 6855995   656925  6855975 POINT (656913.1 6855995) #> 2   2 348296.3 6788073   348275  6788075 POINT (348296.3 6788073) #> 3   3 842276.3 6385680   842275  6385675 POINT (842276.3 6385680) #> 4   4 716750.0 7003984   716775  7003975   POINT (716750 7003984) #> 5   5 667418.2 6585793   667425  6585775 POINT (667418.2 6585793)"},{"path":"https://inseefr.github.io/btb/reference/btb_add_inspire.html","id":null,"dir":"Reference","previous_headings":"","what":"btb_add_inspire — btb_add_inspire","title":"btb_add_inspire — btb_add_inspire","text":"Creates Inpire names grid defined : centroids coordinates Squares size(s) Projection system Ajoute les noms des identifiants en norme Inspire des carreaux définis à partir : des coordonnées de leurs centroides de la taille de leur côté en mètres d'un système de projection)","code":""},{"path":"https://inseefr.github.io/btb/reference/btb_add_inspire.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"btb_add_inspire — btb_add_inspire","text":"","code":"btb_add_inspire(   pts_centro,   sEPSG,   iCellSize,   names_centro = c(\"x_centro\", \"y_centro\") )"},{"path":"https://inseefr.github.io/btb/reference/btb_add_inspire.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"btb_add_inspire — btb_add_inspire","text":"pts_centro (df object) : table centroids. sEPSG (integer character) : epsg code. iCellSize (integer) : cells size(s) meters. Can vector irregular grids names_centro (character vector) : vector names longitude/latitude variables. Default c(\"x_centro\",\"y_centro\").","code":""},{"path":"https://inseefr.github.io/btb/reference/btb_add_inspire.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"btb_add_inspire — btb_add_inspire","text":"(df) pts_centro table additional idInspire variable","code":""},{"path":"https://inseefr.github.io/btb/reference/btb_add_inspire.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"btb_add_inspire — btb_add_inspire","text":"","code":"pts_centro <- data.frame(x_centro = c(100, 100, 300, 300, 500),  y_centro = c(100, 300, 100, 300, 100)) btb_add_inspire(pts_centro, sEPSG = 2154, iCellSize = 200) #>   x_centro y_centro              idInspire #> 1      100      100     CRS2154RES200mN0E0 #> 2      100      300   CRS2154RES200mN200E0 #> 3      300      100   CRS2154RES200mN0E200 #> 4      300      300 CRS2154RES200mN200E200 #> 5      500      100   CRS2154RES200mN0E400"},{"path":"https://inseefr.github.io/btb/reference/btb_ptsToGrid.html","id":null,"dir":"Reference","previous_headings":"","what":"btb_ptsToGrid — btb_ptsToGrid","title":"btb_ptsToGrid — btb_ptsToGrid","text":"Function compute grid (regular ) centroid points. (Fonction permettant de générer une grille (régulière ou non) à partir de centroïdes)","code":""},{"path":"https://inseefr.github.io/btb/reference/btb_ptsToGrid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"btb_ptsToGrid — btb_ptsToGrid","text":"","code":"btb_ptsToGrid(   pts,   sEPSG = NA,   iCellSize = NULL,   names_centro = c(\"x_centro\", \"y_centro\"),   inspire = F )"},{"path":"https://inseefr.github.io/btb/reference/btb_ptsToGrid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"btb_ptsToGrid — btb_ptsToGrid","text":"pts simple data.frame centroids coordinates squares draw, sf object centroides. generate irregular grid, column cell size must provided named iCellSize. (Un simple data.frame comportant les coordonnées des carrés à dessiner, ou un objet sf des centroides. Pour obtenir une grille irrégulière, il faut fournir une colonne indiquant la taille de chaque carreau, et nommée iCellSize. sEPSG EPSG code projection (character). example, RGF93 / Lambert-93 projection \"2154\" code. (code EPSG de la projection (character). Par exemple, la projection RGF93 / Lambert-93 pour code \"2154\".) iCellSize Cell size grid. argument provided, grid regular. (Taille des carreaux de la grille. Si cet argument est fourni, la grille est régulière.) names_centro (character vector) vector names longitude/latitude variables. Default c(\"x_centro\",\"y_centro\"). vecteur des noms des variables de longitude/latitude. Par défaut :  c(\"x_centro\",\"y_centro\") inspire (boolean) : TRUE, returns column Inspire grid names.","code":""},{"path":"https://inseefr.github.io/btb/reference/btb_ptsToGrid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"btb_ptsToGrid — btb_ptsToGrid","text":"Returns object class sf data.frame. (Retourne un objet de classe sf et data.frame.)","code":""},{"path":"https://inseefr.github.io/btb/reference/btb_ptsToGrid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"btb_ptsToGrid — btb_ptsToGrid","text":"","code":"# example 1 - regular grid pts <- data.frame(x_centro = c(100, 100, 300, 300, 500),  y_centro = c(100, 300, 100, 300, 100)) carResult <- btb_ptsToGrid(pts = pts, sEPSG = \"2154\", iCellSize = 200) # write_sf(obj = carResult, dsn = \"regularGrid.shp\", delete_layer = TRUE)  # example 2 - irregular grid pts <- data.frame(x = c(50, 50, 150, 150, 300)                  , y = c(50, 150, 50, 150, 100)                  , iCellSize = c(50, 50, 50, 50, 100)) carResult <- btb_ptsToGrid(pts = pts, sEPSG = \"2154\",names_centro=c(\"x\",\"y\")) # write_sf(obj = carResult, dsn = \"irregularGrid.shp\", delete_layer = TRUE) # Exemple 3 : sf points (no epsg) pts <- data.frame(x = c(100, 100, 300, 300, 500), y = c(100, 300, 100, 300, 100)) pts <- sf::st_as_sf(pts,coords=c(\"x\",\"y\")) carResult <- btb_ptsToGrid(pts = pts, sEPSG = \"2154\", iCellSize = 200) # Exemple 3 : sf points (no epsg) pts <- data.frame(x = c(100, 100, 300, 300, 500),  y = c(100, 300, 100, 300, 100)) pts <- sf::st_as_sf(pts,coords=c(\"x\",\"y\"),crs=2154) carResult <- btb_ptsToGrid(pts = pts, sEPSG = \"2154\", iCellSize = 200)"},{"path":"https://inseefr.github.io/btb/reference/btb_smooth.html","id":null,"dir":"Reference","previous_headings":"","what":"btb_smooth — btb_smooth","title":"btb_smooth — btb_smooth","text":"Smoothing function bisquare kernel median. (Fonction de lissage à partir d'un noyau bisquare ou de la médiane.)","code":""},{"path":"https://inseefr.github.io/btb/reference/btb_smooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"btb_smooth — btb_smooth","text":"","code":"btb_smooth(   pts,   sEPSG = NA,   iCellSize = NA,   iBandwidth,   vQuantiles = NULL,   dfCentroids = NULL,   iNeighbor = NULL,   inspire = F,   iNbObsMin = 250 )"},{"path":"https://inseefr.github.io/btb/reference/btb_smooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"btb_smooth — btb_smooth","text":"pts data.frame cartesian geographical coordinates variables smooth. (x, y, var1, var2, ...) (Un data.frame comportant les coordonnées géographiques cartésiennes (x,y), ainsi que les variables que l'souhaite lisser. (x, y, var1, var2, ...) sEPSG EPSG code projection (character). example, RGF93 / Lambert-93 projection \"2154\" code. (code EPSG de la projection (character). Par exemple, la projection RGF93 / Lambert-93 pour code \"2154\".)` iCellSize Cell size grid (integer). unit measurement free. must unit iBandwidth variable. (Taille des carreaux (integer). Le choix de l'unité de mesure est laissé libre à l'utilisateur. Elle doit seulement être la même que celle de la variable iBandwidth.) iBandwidth Radius Kernel Density Estimator (integer). bandwidth acts smoothing parameter, controlling balance bias variance. large bandwidth leads smooth (.e. high-bias) density distribution. small bandwidth leads unsmooth (.e. high-variance) density distribution. unit measurement free. must unit iCellSize variable. (Rayon de lissage de l'estimation d'intensité par noyau (integer). Cette bande-passante se comporte comme un paramètre de lissage, controlant l'équilibre entre biais et variance. Un rayon élevé conduit à une densité tres lissée, avec un biais élevé. Un petit rayon génère une densité peu lissée avec une forte variance. Le choix de l'unité de mesure est laissé libre à l'utilisateur. Elle doit seulement être la même que celle de la variable iCellSize. vQuantiles Percentile vector calculate. example c(0.1, 0.25, 0.5) calculate first decile, first quartile median. (Vecteur des quantiles à calculer. Par exemple c(0.1, 0.25, 0.5) retournera le premier décile, le premier quartile et la mediane.)` dfCentroids data.frame two columns (x, y) containing coordinates user's centroids. coordinates must projection (pts). (Un data.frame avec deux colonnes (x, y) contenant les coordonnées des centroides de l'utilisateur. Les coordonnées doivent être dans le même système de coordonnées que (pts).) iNeighbor Technical parameter, leave empty. (integer) (Paramètre technique pour calculer l'étendue des points d'estimations, à ne pas remplir. (integer)) inspire (boolean) : TRUE, returns column Inspire grid names. iNbObsMin Minimum size constituted grappes median smoothing.  (integer) (Taille minimale des grappes constituées pour le lissage \"médian\" (géographiquement pondéré). (integer))","code":""},{"path":"https://inseefr.github.io/btb/reference/btb_smooth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"btb_smooth — btb_smooth","text":"Returns object inheriting data.frame class. (Retourne un objet qui se comporte comme un data.frame, par heritage.) Smoothing covers set methods extract pertinent structuring information noisy data.  field spatial analysis, widely quantitative geography, smoothing used modelise density variations population distribution geographical space. Kernel smoothing methods widely used. method, location x, count number events process within distance h x, weighted square reciprocal radius h. apply edge-correction deal edge-effects. method conservative.. Le lissage recouvre un ensemble de méthodes pour extraire d'une source de données bruitées une information pertinente et structurante. Dans le champ de l'analyse spatiale et plus largement de la géographie quantitative, le lissage est principalement utilisé pour modéliser les variations de densités d'une distribution de population dans l'espace géographique. utilise principalement des méthodes de lissage par noyau. Il s'agit ici, pour chaque point x, de comptabliser le nombre d' \"évènements\" d'un processus à une distance h de ce point, tout en ponderant ce nombre par l'inverse de la distance h au carré. applique une correction à la ponderation afin de traiter les effets de bord. Cette méthode est conservative.","code":""},{"path":"https://inseefr.github.io/btb/reference/btb_smooth.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"btb_smooth — btb_smooth","text":"\"Geographically weighted summary statistics : framework localised exploratory data analysis\", C.Brunsdon & al., Computers, Environment Urban Systems 2002 Statistical Analysis Spatial Spatio-Temporal Point Patterns, Third Edition, Diggle, 2003, pp. 83-86","code":""},{"path":[]},{"path":"https://inseefr.github.io/btb/reference/constituerGrappes.html","id":null,"dir":"Reference","previous_headings":"","what":"constituerGrappes — constituerGrappes","title":"constituerGrappes — constituerGrappes","text":"Quadtree variant function. (Variante de la fonction Quadtree.)","code":""},{"path":"https://inseefr.github.io/btb/reference/constituerGrappes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"constituerGrappes — constituerGrappes","text":"","code":"constituerGrappes(iNbObsMin, mEffectifs)"},{"path":"https://inseefr.github.io/btb/reference/constituerGrappes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"constituerGrappes — constituerGrappes","text":"iNbObsMin integer representing minimum number elements cluster Un data.frame représentant le nombre minimum d'éléments dans chaque grappe.) mEffectifs staffing matrix cell (matrix). matrice des effectifs pour chaque case (matrix). .)","code":""},{"path":"https://inseefr.github.io/btb/reference/constituerGrappes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"constituerGrappes — constituerGrappes","text":"Returns matrix cluster number cell . Retourne une matrix avec le numéro de grappe pour chaque cellule.","code":""},{"path":"https://inseefr.github.io/btb/reference/constituerGrappes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"constituerGrappes — constituerGrappes","text":"Psar Analyse Urbaine Insee Arlindo Dos Santos Francois Semecurbe","code":""},{"path":"https://inseefr.github.io/btb/reference/constituerMatriceEffectifs.html","id":null,"dir":"Reference","previous_headings":"","what":"constituerMatriceEffectifs — constituerMatriceEffectifs","title":"constituerMatriceEffectifs — constituerMatriceEffectifs","text":"Function constituting membership matrix (Fonction constituant une matrice des effectifs)","code":""},{"path":"https://inseefr.github.io/btb/reference/constituerMatriceEffectifs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"constituerMatriceEffectifs — constituerMatriceEffectifs","text":"","code":"constituerMatriceEffectifs(vLigneObservation, vColonneObservation)"},{"path":"https://inseefr.github.io/btb/reference/constituerMatriceEffectifs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"constituerMatriceEffectifs — constituerMatriceEffectifs","text":"vLigneObservation : vector containing line number observation (Un vector contenant le numéro de ligne de chaque observation.) vColonneObservation : vector containing column number observation (Un vector contenant le numéro de colonne de chaque observation.)","code":""},{"path":"https://inseefr.github.io/btb/reference/constituerMatriceEffectifs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"constituerMatriceEffectifs — constituerMatriceEffectifs","text":"Returns matrix number observations cell. (Retourne une matrix avec le nombre d'observations pour chaque cellule.)","code":""},{"path":"https://inseefr.github.io/btb/reference/constituerMatriceEffectifs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"constituerMatriceEffectifs — constituerMatriceEffectifs","text":"Psar Analyse Urbaine Insee Arlindo Dos Santos Francois Semecurbe","code":""},{"path":"https://inseefr.github.io/btb/reference/dfPrix_SP95_2016.html","id":null,"dir":"Reference","previous_headings":"","what":"Unleaded 95 price in France in 2016  (Prix du sans plomb 95 en france en 2016) — dfPrix_SP95_2016","title":"Unleaded 95 price in France in 2016  (Prix du sans plomb 95 en france en 2016) — dfPrix_SP95_2016","text":"Unleaded 95 price France 2016 (prix du sans-plomb 95 en France en 2016)","code":""},{"path":"https://inseefr.github.io/btb/reference/dfPrix_SP95_2016.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unleaded 95 price in France in 2016  (Prix du sans plomb 95 en france en 2016) — dfPrix_SP95_2016","text":"","code":"dfPrix_SP95_2016"},{"path":[]},{"path":"https://inseefr.github.io/btb/reference/dfPrix_SP95_2016.html","id":"dfprix-sp-","dir":"Reference","previous_headings":"","what":"dfPrix_SP95_2016","title":"Unleaded 95 price in France in 2016  (Prix du sans plomb 95 en france en 2016) — dfPrix_SP95_2016","text":"data frame 5,573 rows 3 columns: x longitude y latitude SP95 Unleaded price - prix du sans plomb","code":""},{"path":"https://inseefr.github.io/btb/reference/dfPrix_SP95_2016.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Unleaded 95 price in France in 2016  (Prix du sans plomb 95 en france en 2016) — dfPrix_SP95_2016","text":"https://www.prix-carburants.gouv.fr/rubrique/opendata/","code":""},{"path":"https://inseefr.github.io/btb/reference/dfRestaurantParis.html","id":null,"dir":"Reference","previous_headings":"","what":"Unleaded 95 price in France in 2016  (Prix du sans plomb 95 en france en 2016) — dfRestaurantParis","title":"Unleaded 95 price in France in 2016  (Prix du sans plomb 95 en france en 2016) — dfRestaurantParis","text":"Parisian restaurants (Restaurants parisiens)","code":""},{"path":"https://inseefr.github.io/btb/reference/dfRestaurantParis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unleaded 95 price in France in 2016  (Prix du sans plomb 95 en france en 2016) — dfRestaurantParis","text":"","code":"dfRestaurantParis"},{"path":[]},{"path":"https://inseefr.github.io/btb/reference/dfRestaurantParis.html","id":"dfrestaurantparis","dir":"Reference","previous_headings":"","what":"dfRestaurantParis","title":"Unleaded 95 price in France in 2016  (Prix du sans plomb 95 en france en 2016) — dfRestaurantParis","text":"data frame 13,823 rows 17 columns: x longitude y latitude french French restaurant asian asian restaurant caribbean caribbean restaurant maghreb maghreb restaurant african african restaurant european european restaurant south_america south_american restaurant indian indian restaurant world world food restaurant cafeteria cafeteria restaurant tea_house tea_house brasserie brasserie restaurant fastfood fastfood restaurant bar bar restaurant restaurant","code":""},{"path":"https://inseefr.github.io/btb/reference/dfRestaurantParis.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Unleaded 95 price in France in 2016  (Prix du sans plomb 95 en france en 2016) — dfRestaurantParis","text":"source : https://opendata.paris.fr","code":""},{"path":"https://inseefr.github.io/btb/reference/dfToGrid.html","id":null,"dir":"Reference","previous_headings":"","what":"dfToGrid — dfToGrid","title":"dfToGrid — dfToGrid","text":"Function dfToGrid replaced btb_ptsToGrid","code":""},{"path":"https://inseefr.github.io/btb/reference/dfToGrid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dfToGrid — dfToGrid","text":"","code":"dfToGrid(df, sEPSG, iCellSize = NULL)"},{"path":"https://inseefr.github.io/btb/reference/dfToGrid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dfToGrid — dfToGrid","text":"df centroid points sEPSG epsg code iCellSize cell size","code":""},{"path":"https://inseefr.github.io/btb/reference/dfToGrid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dfToGrid — dfToGrid","text":"grid","code":""},{"path":"https://inseefr.github.io/btb/reference/kernelSmoothing.html","id":null,"dir":"Reference","previous_headings":"","what":"kernelSmoothing — kernelSmoothing","title":"kernelSmoothing — kernelSmoothing","text":"Function kernelSmoothing replaced btb_smooth","code":""},{"path":"https://inseefr.github.io/btb/reference/kernelSmoothing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"kernelSmoothing — kernelSmoothing","text":"","code":"kernelSmoothing(   dfObservations,   sEPSG,   iCellSize,   iBandwidth,   vQuantiles = NULL,   dfCentroids = NULL,   fUpdateProgress = NULL,   iNeighbor = NULL,   iNbObsMin = 250 )"},{"path":"https://inseefr.github.io/btb/reference/kernelSmoothing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"kernelSmoothing — kernelSmoothing","text":"dfObservations points sEPSG epsg code iCellSize cell size iBandwidth smoothing bandwidth vQuantiles quantiles dfCentroids user grid fUpdateProgress message parameter iNeighbor number neighbors pixels iNbObsMin technical parameter","code":""},{"path":"https://inseefr.github.io/btb/reference/kernelSmoothing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"kernelSmoothing — kernelSmoothing","text":"warning message","code":""},{"path":"https://inseefr.github.io/btb/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://inseefr.github.io/btb/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://inseefr.github.io/btb/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://inseefr.github.io/btb/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://inseefr.github.io/btb/reference/pixel_france.html","id":null,"dir":"Reference","previous_headings":"","what":"Unleaded 95 price in France in 2016  (Prix du sans plomb 95 en france en 2016) — pixel_france","title":"Unleaded 95 price in France in 2016  (Prix du sans plomb 95 en france en 2016) — pixel_france","text":"Whole France grid 1km square tiles. Lambert 93 projection. (Grille France entière avec des carreaux d'1km de côté. Projection Lambert 93)","code":""},{"path":"https://inseefr.github.io/btb/reference/pixel_france.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unleaded 95 price in France in 2016  (Prix du sans plomb 95 en france en 2016) — pixel_france","text":"","code":"pixel_france"},{"path":[]},{"path":"https://inseefr.github.io/btb/reference/pixel_france.html","id":"pixel-france","dir":"Reference","previous_headings":"","what":"pixel_france","title":"Unleaded 95 price in France in 2016  (Prix du sans plomb 95 en france en 2016) — pixel_france","text":"data frame 54,8495 rows 2 columns: x longitude pixel's centroids y latitude pixel's centroids","code":""},{"path":"https://inseefr.github.io/btb/reference/pixel_france.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Unleaded 95 price in France in 2016  (Prix du sans plomb 95 en france en 2016) — pixel_france","text":"source : https://opendata.paris.fr","code":""},{"path":"https://inseefr.github.io/btb/reference/reunion.html","id":null,"dir":"Reference","previous_headings":"","what":"Households of Reunion (Menages de La Reunion) — reunion","title":"Households of Reunion (Menages de La Reunion) — reunion","text":"Gridded database grid cell resolution 200 meters. (Données carroyées à 200 mètres).","code":""},{"path":"https://inseefr.github.io/btb/reference/reunion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Households of Reunion (Menages de La Reunion) — reunion","text":"","code":"reunion"},{"path":[]},{"path":"https://inseefr.github.io/btb/reference/reunion.html","id":"reunion","dir":"Reference","previous_headings":"","what":"reunion","title":"Households of Reunion (Menages de La Reunion) — reunion","text":"data frame 14,076 rows 4 columns: x longitude y latitude houhold number households - nombre de ménages phouhold number poor households - nombre de ménages pauvres","code":""},{"path":"https://inseefr.github.io/btb/reference/reunion.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Households of Reunion (Menages de La Reunion) — reunion","text":"Source : Insee, Localized data : Fiscal Revenue - 31/12/2010 Housing Tax - 01/01/2011 Source : Insee, Revenus Fiscaux Localisés (RFL) au 31 decembre 2010 et Taxe d'habitation (TH) au 1er janvier 2011)","code":""},{"path":"https://inseefr.github.io/btb/news/index.html","id":"btb-020","dir":"Changelog","previous_headings":"","what":"btb 0.2.0","title":"btb 0.2.0","text":"Change maintainer, new authors (november 2022) Change dfToGrid name (btb_ptsToGrid) Allow btb_ptsToGrid use simple feature points input Change kernelSmoothing name (btb_smooth) Allow btb_ptsToGrid use simple feature points input New function link points centroid grid (btb_add_centroides) Updates messages smoothing removed (RcppLissage.cpp) Old functions dfToGrid kernelSmoothing replaced warnings Possibility use Inspire naming grid cells (btb_add_inspire function) Roxygen documentation testthat compatible tests New tests Add vignette Add pkgdown website","code":""},{"path":"https://inseefr.github.io/btb/news/index.html","id":"btb-018","dir":"Changelog","previous_headings":"","what":"btb 0.1.8","title":"btb 0.1.8","text":"add iNbObsMin classical smoothing smoothingToGrid integrated kernelSmoothing","code":""},{"path":"https://inseefr.github.io/btb/news/index.html","id":"btb-017","dir":"Changelog","previous_headings":"","what":"btb 0.1.7","title":"btb 0.1.7","text":"function updateProgress smoothingToGrid","code":""},{"path":"https://inseefr.github.io/btb/news/index.html","id":"btb-016","dir":"Changelog","previous_headings":"","what":"btb 0.1.6","title":"btb 0.1.6","text":"iNeighbor parameter","code":""},{"path":"https://inseefr.github.io/btb/news/index.html","id":"btb-0119","dir":"Changelog","previous_headings":"","what":"btb 0.1.19","title":"btb 0.1.19","text":"improvement: ckecking NA exists coordinates variables loops (faster anyNA) improvement: two matrix suppressed parameters sended rcppLissage new function : constituerGrappes new function : constituerMatriceEffectifs","code":""},{"path":"https://inseefr.github.io/btb/news/index.html","id":"btb-0118","dir":"Changelog","previous_headings":"","what":"btb 0.1.18","title":"btb 0.1.18","text":"improvement: kernelSmoothing uses armadillo matrix instead NumericMatrix","code":""},{"path":"https://inseefr.github.io/btb/news/index.html","id":"btb-0117","dir":"Changelog","previous_headings":"","what":"btb 0.1.17","title":"btb 0.1.17","text":"improvement: kernelSmoothing quantiles splits computation parallel clusters (RcppParallel)","code":""},{"path":"https://inseefr.github.io/btb/news/index.html","id":"btb-0115","dir":"Changelog","previous_headings":"","what":"btb 0.1.15","title":"btb 0.1.15","text":"improvement: verbose output console fUpdateProgress provided. (provided, output must managed calling function) improvement: use left-value [, “var”] instead $var","code":""},{"path":"https://inseefr.github.io/btb/news/index.html","id":"btb-0113","dir":"Changelog","previous_headings":"","what":"btb 0.1.13","title":"btb 0.1.13","text":"bug fixed: upper boundary loop underestimated bandwidth > neighbor o cellSize bug fixed: offset wrong dfCendroids provided improving window looking cells send smoothed value new argument kernelSmoothing smoothingToGrid: fUpdateProgress neighbor argument 0 dfCendroids provided adding NEWS file adding unit tests encoding UTF-8 (description file)","code":""},{"path":"https://inseefr.github.io/btb/news/index.html","id":"btb-013","dir":"Changelog","previous_headings":"","what":"btb 0.1.3","title":"btb 0.1.3","text":"CRAN release: 2016-10-28 change c++ library call solaris compatibility","code":""},{"path":"https://inseefr.github.io/btb/news/index.html","id":"btb-012","dir":"Changelog","previous_headings":"","what":"btb 0.1.2","title":"btb 0.1.2","text":"CRAN release: 2016-10-26 bug fixed: manage missing values bug fixed: doubles comparison rename bandwith bandwidth improved documentation improved memory improved (double int possible) kernelSmoothing accept new argument: dfCentroids new smoothing mode: mobile quantile log na value found check bandwidth > sqrt(cellSize) / 2 check x y null encoding source files UTF-8","code":""},{"path":"https://inseefr.github.io/btb/news/index.html","id":"btb-011","dir":"Changelog","previous_headings":"","what":"btb 0.1.1","title":"btb 0.1.1","text":"small bugs correction","code":""},{"path":"https://inseefr.github.io/btb/news/index.html","id":"btb-010","dir":"Changelog","previous_headings":"","what":"btb 0.1.0","title":"btb 0.1.0","text":"kernelSmoothingMedian function","code":""},{"path":"https://inseefr.github.io/btb/news/index.html","id":"btb-007","dir":"Changelog","previous_headings":"","what":"btb 0.0.7","title":"btb 0.0.7","text":"CRAN release: 2016-08-10 initial release package","code":""}]
